
package SDM::Test::Lib;

use strict;
use warnings;

BEGIN {
    # testing means use sqlite db, we do want to commit.
    $ENV{SDM_DEPLOYMENT} ||= "testing";
    $ENV{UR_DBI_NO_COMMIT} = 0;
    $ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 0;
};

use Test::More;
use Cwd qw/abs_path/;
use File::Basename qw/dirname/;
use IPC::Cmd qw/can_run/;
use Data::Dumper;

use SDM;

my $ds = SDM::DataSource::Asset->get();
my $driver = $ds->driver;
my $top = dirname dirname abs_path(__FILE__);
my $base = "$top/lib/SDM";
my $perl = "$^X -I $top/lib -I $top/../sdm/lib";
my $sdm = can_run("sdm");
unless ($sdm) {
    if (-e "./sdm-asset/sdm/bin/sdm") {
        $sdm = "./sdm-asset/sdm/bin/sdm";
    } elsif (-e "./sdm/bin/sdm") {
        $sdm = "./sdm/bin/sdm";
    } elsif (-e "../sdm/bin/sdm") {
        $sdm = "../sdm/bin/sdm";
    } else {
        die "Can't find 'sdm' executable";
    }
}

die "sdm not found in PATH" unless (defined $sdm);

sub new {
    my $class = shift;
    my $self = {
        'perl' => $perl,
        'sdm' => $sdm,
    };
    bless $self,$class;
    return $self;
}

sub runcmd {
    my $self = shift;
    my $command = shift;
    $ENV{SDM_NO_REQUIRE_USER_VERIFY} ||= 1;
    print("$command\n");
    system("$command");
    if ($? == -1) {
         print "failed to execute: $!\n";
    } elsif ($? & 127) {
         printf "child died with signal %d, %s coredump\n",
             ($? & 127),  ($? & 128) ? 'with' : 'without';
    } else {
         printf "child exited with value %d\n", $? >> 8;
    }
    ok( $? >> 8 == 0, "ok: $command") or die;
}

sub testinit {
    my $self = shift;
    if ($driver eq "SQLite") {
        print "flush sqlite3 DB\n";
        unlink "$base/DataSource/Asset.sqlite3";
        unlink "$base/DataSource/Asset.sqlite3-dump";
        print "make new sqlite3 DB\n";
        $self->runcmd("/usr/bin/sqlite3 $base/DataSource/Asset.sqlite3 < $base/DataSource/Asset.sqlite3.schema");
        $self->runcmd("/usr/bin/sqlite3 $base/DataSource/Asset.sqlite3 .dump > $base/DataSource/Asset.sqlite3-dump");
    }

    if ($driver eq "Pg") {
        print "flush and remake psql DB\n";
        $self->runcmd("/usr/bin/psql -w -d system -U system < $base/DataSource/Asset.psql.schema >/dev/null");
    }

    print "flush and remake Meta\n";
    my $ds = "$top/../sdm/lib/SDM/DataSource";
    unlink "$ds/Meta.sqlite3";
    unlink "$ds/Meta.sqlite3-dump";
    $self->runcmd("/usr/bin/sqlite3 $ds/Meta.sqlite3 < $ds/Meta.sqlite3-schema");
    $self->runcmd("/usr/bin/sqlite3 $ds/Meta.sqlite3 .dump > $ds/Meta.sqlite3-dump");
    return 0;
}

sub testdata {
    my $self = shift;
    my @params = (
        manufacturer  => 'manufacturer',
        model         => 'model',
        serial        => 'serialXYZ1234',
        description   => 'description',
        comments      => 'comments',
        location      => 'location',
    );
    my $a = SDM::Asset::Hardware->create( @params );
    ok( defined $a );
    warn "" . Data::Dumper::Dumper $a;

    UR::Context->commit();
    return 0;
}

1;

