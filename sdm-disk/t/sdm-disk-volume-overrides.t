
use strict;
use warnings;

BEGIN {
    $ENV{SDM_DEPLOYMENT} ||= "testing";
    $ENV{UR_DBI_NO_COMMIT} = 0;
    $ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 0;
};

use SDM;

use Test::More;
use Test::Output;
use Test::Exception;

my $res;
my $params;

# Start with a fresh database
use File::Basename qw/dirname/;
my $top = dirname $FindBin::Bin;
require "$top/t/sdm-disk-lib.pm";
ok( SDM::Test::Lib->testinit == 0, "ok: init db");

# Create filer to test with
my $gpfs = SDM::Disk::Filer->create( name => 'gpfs', type => 'gpfs' );
my $gpfs2 = SDM::Disk::Filer->create( name => 'gpfs2', type => 'gpfs' );
ok( defined $gpfs, "created test filer ok");

# Volumes (not PolyserveVolumes) are uniqe(name,filername)

# Test creation
my @params = ( mount_point => '/gscmnt', name => 'sata800', physical_path => '/vol/sata800', total_kb => 2, used_kb => 1 );
my $vol1_800 = $gpfs->create_volume( @params );
ok( defined $vol1_800->id, "properly created new volume");
my $vol = $gpfs->create_volume( @params );
ok( ! defined $vol, "properly prevented creating duplicate volume");

@params = ( mount_point => '/gscmnt', name => 'sata801', physical_path => '/vol/sata801', total_kb => 2, used_kb => 1 );
my $vol1_801 = $gpfs->create_volume( @params );

@params = ( mount_point => '/gscmnt', name => 'sata800', physical_path => '/vol/sata800', total_kb => 2, used_kb => 1 );
my $vol2_800 = $gpfs2->create_volume( @params );

my $v = SDM::Disk::Volume->get( filername => 'gpfs', name => 'sata800' );
ok( $v->name eq 'sata800' );
# this should fail
ok( ! defined $v->filername( 'gpfs2' ), "properly prevent changing an object into another" );
ok( ! defined $v->name( 'sata801' ), "properly prevent changing an object into another" );

done_testing();
