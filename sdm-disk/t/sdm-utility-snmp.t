
use strict;
use warnings;

BEGIN {
    $ENV{SDM_DEPLOYMENT} = "testing";
    $ENV{UR_DBI_NO_COMMIT} = 0;
    $ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 0;
};

use Sdm;

use Test::More;
use Test::Output;
use Test::Exception;

#unless ($ENV{SDM_GENOME_INSTITUTE_NETWORKS}) {
# disabled, not ready to delete this just yet
    plan skip_all => "Don't assume we can reach SNMP on named hosts for non GI networks";
#}

my $obj = Sdm::Utility::SNMP->create( hostname => 'localhost' );
ok( $obj->hosttype eq 'linux', "ok: snmp obj for localhost");

my $res = $obj->_get_host_type('ntap11');
ok( $obj->hosttype eq 'netapp', "ok: snmp obj for netapp");

my $line = "NETAPP-MIB::df64SisSavedKBytes.21 = Counter64: 0";
$res = $obj->_parse_snmp_line($line);
my $expected = {
  'value' => '0',
  'oid' => 'df64SisSavedKBytes',
  'type' => 'Counter64',
  'idx' => '21',
  'mib' => 'NETAPP-MIB'
};
ok( is_deeply( $res,$expected, "ok: is_deeply"), "ok: _parse_snmp_line");

$obj->hostname("linuscs107");
$obj->command("snmpwalk");
$res = $obj->_get_host_type();
ok( $obj->hosttype eq 'linux', "ok: snmp obj for linux");
$res = $obj->read_snmp_into_table('hrStorageTable');
ok( scalar(keys %$res) > 1, "ok: snmp returns some data");
my $key = (sort keys %$res)[0];
my @items = keys %{ $res->{$key}};
my @expected = ( 'hrStorageSize','hrStorageUsed','hrStorageAllocationUnits','hrStorageDescr','hrStorageType','hrStorageIndex');
ok( is_deeply( \@items, \@expected, "ok: is_deeply" ), "ok: snmp returns hrStorageTable");

done_testing();
