
use strict;
use warnings;

BEGIN {
    $ENV{SDM_DEPLOYMENT} = "testing";
    $ENV{UR_DBI_NO_COMMIT} = 0;
    $ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 0;
};

use Sdm;

use Test::More;
use Test::Output;
use Test::Exception;

my $res;
my $params;

# Start with a fresh database
use File::Basename qw/dirname/;
my $top = dirname $FindBin::Bin;
require "$top/t/sdm-disk-lib.pm";
ok( Sdm::Disk::Lib->testinit == 0, "ok: init db");

# Test insufficient creation params
my %params = ();
ok( ! defined Sdm::Disk::Fileset->create( %params ), "properly fail to create fileset with empty param" );
%params = ( physical_path => '/vol/sata800' );
ok( ! defined Sdm::Disk::Fileset->create( %params ), "properly fail to create fileset with no filer name" );
%params = ( filername => 'nfs11' );
ok( ! defined Sdm::Disk::Fileset->create( %params ), "properly fail to create fileset with no physical_path" );

# Create filer to test with
ok( defined Sdm::Disk::Filer->create( name => 'nfs11' ), "created test filer ok");
ok( defined Sdm::Disk::Filer->create( name => 'nfs12' ), "created test filer ok");
ok( defined Sdm::Disk::Filer->create( name => 'gpfs' ), "created test filer ok");

ok( my $array = Sdm::Disk::Array->create( name => 'nsams2k1' ), "created test array ok");
ok( my $host = Sdm::Disk::Host->create( hostname => 'linuscs103' ), "created test host ok");
my $r = $array->assign( "linuscs103" );
isa_ok( $r, "Sdm::Disk::HostArrayBridge" );
$r = $host->assign( "nfs11" );
isa_ok( $r, "Sdm::Disk::FilerHostBridge" );

# Create test group to test with
ok( defined Sdm::Disk::Group->create( name => 'INFO_GENOME_MODELS' ), "created test group ok");

# Test premature creation
%params = ( filername => 'nfs11', physical_path => '/vol/sata800', disk_group => 'INFO_GENOME_MODELS', total_kb => 2, used_kb => 1 );
$res = Sdm::Disk::Fileset->create( %params );
ok( ! defined $res, "properly failed to create new fileset without parent volume");

%params = ( filername => 'gpfs', physical_path => '/vol/aggr0', disk_group => 'INFO_GENOME_MODELS', total_kb => 2000, used_kb => 1000 );
my $volume = Sdm::Disk::Volume->create( %params );

ok( defined $volume->id, "properly created new parent volume aggr0");

%params = (
        filername => 'nfs11',
        parent_volume_id => $volume->id,
        physical_path => '/vol/aggr0/gc7000',
        mount_path => '/gscmnt/aggr0/gc7000',
        disk_group => 'INFO_GENOME_MODELS',
        kb_size => 62210072304,
        kb_quota => 0,
        kb_limit => 214748364800,
        kb_in_doubt => 27967088,
        kb_grace => 'none',
        files => 214324,
        file_quota => 0,
        file_limit => 0,
        file_in_doubt => 138,
        file_grace => 'none',
        file_entrytype => 'e'
);
$res = Sdm::Disk::Fileset->create( %params );
ok( defined $res->id, "properly created new fileset");
UR::Context->commit();

# Test creation of new mount of same Volume physical_path
$res = Sdm::Disk::Fileset->create( %params );
ok( ! defined $res, "properly prevented duplicate volume creation");

$res = Sdm::Disk::Volume->get( mount_path => '/gscmnt/aggr0/gc7000' );
ok( $res->physical_path eq '/vol/aggr0/gc7000', "properly got via mount_path");

# Test update of value
%params = ( physical_path => '/vol/aggr0/gc7000' );
$res = Sdm::Disk::Volume->get( %params );
$res->total_kb(70000000000);
ok( $res->total_kb == 70000000000, "total_kb set to 70000000000");

# Update last modified to age the volume
$res->last_modified( Date::Format::time2str(q|%Y%m%d%H:%M:%S|, time()) );
ok( $res->is_current(86400) == 0, "volume is current" );
$res->last_modified( Date::Format::time2str(q|%Y%m%d%H:%M:%S|, time() - 87000 ) );
ok( $res->is_current(86400) == 1, "volume is aged");

# Test validate and purge for aging volumes
stderr_like { $res->validate(); } qr|Aging volume|, "validate runs ok";
stderr_like { $res->purge(); } qr|Purging aging volume|, "validate runs ok";

done_testing();
