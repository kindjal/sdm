
use strict;
use warnings;

BEGIN {
    $ENV{SDM_DEPLOYMENT} ||= "testing";
    $ENV{UR_DBI_NO_COMMIT} = 0;
    $ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 0;
};

use Sdm;

use Test::More;
use Test::Output;
use Test::Exception;

my $res;
my $params;

# Start with a fresh database
use File::Basename qw/dirname/;
my $top = dirname $FindBin::Bin;
require "$top/t/sdm-disk-lib.pm";
ok( Sdm::Disk::Lib->testinit == 0, "ok: init db");

# Test insufficient creation params
my @params = ();
ok( ! defined Sdm::Disk::Volume->create( @params ), "properly fail to create volume with empty param" );
@params = ( filername => 'gpfs' );
ok( ! defined Sdm::Disk::Volume->create( @params ), "properly fail to create volume with no physical_path" );
@params = ( physical_path => '/vol/gc2111' );
ok( ! defined Sdm::Disk::Volume->create( @params ), "properly fail to create volume with no filername" );

# Create filer to test with
my $nfs11 = Sdm::Disk::Filer->create( name => 'nfs11' );
ok( defined $nfs11, "created test filer ok");
my $nfs12 = Sdm::Disk::Filer->create( name => 'nfs12' );
ok( defined $nfs12, "created test filer ok");

ok( my $array = Sdm::Disk::Array->create( name => 'nsams2k1' ), "created test array ok");
ok( my $host = Sdm::Disk::Host->create( hostname => 'linuscs103' ), "created test host ok");
my $r = $array->assign( "linuscs103" );
isa_ok( $r, "Sdm::Disk::HostArrayBridge" );
$r = $host->assign( "nfs11" );
$r = $host->assign( "nfs12" );
isa_ok( $r, "Sdm::Disk::FilerHostBridge" );

# Create test group to test with
ok( defined Sdm::Disk::Group->create( name => 'INFO_GENOME_MODELS' ), "created test group ok");

# Test creation
@params = ( filername => 'nfs11', mount_path => '/gscmnt/sata800', physical_path => '/vol/sata800', disk_group => 'INFO_GENOME_MODELS', total_kb => 2, used_kb => 1 );
$res = Sdm::Disk::Volume->create( @params );
ok( defined $res->id, "properly created new volume");
$res = Sdm::Disk::Volume->create( @params );
ok( ! defined $res, "properly prevented duplicate volume");

# same physical path but altered params
@params = ( filername => 'nfs11', mount_path => '/gscmnt/sata800', physical_path => '/vol/sata800', disk_group => 'INFO_GENOME_MODELS', total_kb => 3, used_kb => 2 );
$res = Sdm::Disk::Volume->create( @params );
ok( ! defined $res, "properly prevented duplicate volume");

# now make a sata800 on nfs12 then set it as a duplicate
@params = ( filername => 'nfs12', mount_path => '/gscmnt/sata800', physical_path => '/vol/sata800', disk_group => 'INFO_GENOME_MODELS', total_kb => 3, used_kb => 2 );
$res = Sdm::Disk::Volume->create( @params );
ok( defined $res->id, "properly created new volume sata800");
$nfs12->duplicates('nfs11');

# Create via volume
@params = ( filername => 'nfs11', physical_path => '/vol/sata801', disk_group => 'INFO_GENOME_MODELS', total_kb => 2, used_kb => 1 );
$res = $nfs11->create_volume( @params );
ok( defined $res->id, "properly created new volume sata801");
$res = $nfs11->create_volume( @params );
ok( ! defined $res, "properly prevented duplicate volume sata801");

# Create volume directly
@params = ( physical_path => '/vol/sata801', disk_group => 'INFO_GENOME_MODELS', total_kb => 2, used_kb => 1 );
$res = Sdm::Disk::Volume->get( @params );
ok( defined $res->id, "properly got volume sata801");

# Test creation of new mount of same Volume
@params = ( physical_path => '/vol/sata801', disk_group => 'INFO_GENOME_MODELS', total_kb => 2, used_kb => 1 );
$res = Sdm::Disk::Volume->get_or_create( @params );

# Test update of value
$res->total_kb(1000);
ok( $res->total_kb == 1000, "total_kb set to 1000");

# Update last modified to age the volume
$res->last_modified( Date::Format::time2str(q|%Y%m%d%H:%M:%S|, time()) );
ok( $res->is_current(86400) == 0, "volume is current" );
$res->last_modified( Date::Format::time2str(q|%Y%m%d%H:%M:%S|, time() - 87000 ) );
ok( $res->is_current(86400) == 1, "volume is aged");

# Test validate and purge for aging volumes
stderr_like { $res->validate(); } qr|Aging volume|, "validate runs ok";
stderr_like { $res->purge(); } qr|Purging aging volume|, "validate runs ok";

# Now test 'delete'
@params = ( filername => 'nfs11', physical_path => '/vol/sata801', mount_path => '/gscmnt/sata801' );
$res = Sdm::Disk::Volume->create( @params );
$res->delete();
isa_ok( $res, 'UR::DeletedRef' );

done_testing();
