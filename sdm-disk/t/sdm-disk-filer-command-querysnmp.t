
use strict;
use warnings;

BEGIN {
    $ENV{SDM_DEPLOYMENT} ||= "testing";
    $ENV{UR_DBI_NO_COMMIT} = 0;
    $ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 0;
};

use Test::More;
use Test::Output;
use Test::Exception;
use Data::Dumper;

use_ok( 'SDM' );

unless ($ENV{SDM_GENOME_INSTITUTE_NETWORKS}) {
    plan skip_all => "Don't assume we can reach SNMP on named hosts for non GI networks";
}

use SDM::Utility::SNMP;

# Start with a fresh database
use FindBin;
use File::Basename qw/dirname/;
my $top = dirname $FindBin::Bin;
require "$top/t/sdm-disk-lib.pm";

my $t = SDM::Disk::Lib->new();
ok( $t->testinit == 0, "ok: init db");
#ok( $t->testdata == 0, "ok: add data");

sub fileslurp {
    my $filename = shift;
    open(FH,"<$filename") or die "Failed to open $filename: $!";
    my $content = do { local $/; <FH> };
    close(FH);
    return $content;
}

my $filername = 'nfs11';
my $hostname = 'nfs11';
my $filer = SDM::Disk::Filer->create( name => $filername, type => 'snmp' );
my $host = SDM::Disk::Host->create( hostname => $hostname, master => 1 );
$host->assign($filer->name);
ok( defined $filer->id, "created filer ok");

# mimic acquire_volume_data and update_volumes
my $c = SDM::Disk::Filer::Command::Query::SnmpDiskUsage->create( loglevel => "DEBUG", filer => $filer, discover_volumes => 0, discover_groups => 0, unittest => 1 );
$c->hosttype('netapp');
# first with discover_volumes = 0 then 1
# netapp and linux host
my $oid = 'dfTable';
my $lines = fileslurp("$top/t/dfTable.txt");
my @content = map { $c->_parse_snmp_line($_) } @{ [ split("\n",$lines) ] };
my $snmp_table = $c->read_snmp_into_table($oid, \@content);
my $table = $c->_convert_to_volume_data( $snmp_table );
$c->_update_volumes( $table );
delete $table->{'/vol/x64mswin/'};
$c->_update_volumes( $table );

$c->hosttype('linux');
$oid = 'hrStorageTable';
$lines = fileslurp("$top/t/hrStorageTable.txt");
@content = map { $c->_parse_snmp_line($_) } @{ [ split("\n",$lines) ] };
$snmp_table = $c->read_snmp_into_table($oid, \@content);
$table = $c->_convert_to_volume_data( $snmp_table );
$c->_update_volumes( $table );

UR::Context->commit();

$c = SDM::Disk::Filer::Command::Query::SnmpDiskUsage->create( loglevel => "DEBUG", filer => $filer, discover_volumes => 1, discover_groups => 1, unittest => 1 );
$c->hosttype('netapp');
# first with discover_volumes = 0 then 1
# netapp and linux host
$oid = 'dfTable';
$lines = fileslurp("$top/t/dfTable.txt");
@content = map { $c->_parse_snmp_line($_) } @{ [ split("\n",$lines) ] };
$snmp_table = $c->read_snmp_into_table($oid, \@content);
$table = $c->_convert_to_volume_data( $snmp_table );
$c->_update_volumes( $table );
delete $table->{'/vol/x64mswin/'};
$c->_update_volumes( $table );

$c->hosttype('linux');
$oid = 'hrStorageTable';
$lines = fileslurp("$top/t/hrStorageTable.txt");
@content = map { $c->_parse_snmp_line($_) } @{ [ split("\n",$lines) ] };
$snmp_table = $c->read_snmp_into_table($oid, \@content);
$table = $c->_convert_to_volume_data( $snmp_table );
$c->_update_volumes( $table );

UR::Context->commit();

done_testing();
