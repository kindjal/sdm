
use strict;
use warnings;
use Data::Dumper;

BEGIN {
    $ENV{SDM_DEPLOYMENT} ||= "testing";
    $ENV{UR_DBI_NO_COMMIT} = 0;
    $ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 0;
};

use SDM;

use Test::More;
use Test::Exception;
use Test::Output;

# Start with a fresh database
use File::Basename qw/dirname/;
my $top = dirname $FindBin::Bin;
require "$top/t/sdm-lib.pm";
ok( SDM::Test::Lib->testinit == 0, "ok: init db");
ok( SDM::Test::Lib->testdata == 0, "ok: init db");

my $filername = "gpfs-dev";
my $hostname = "linuscs107";
my $obj = SDM::Disk::Filer::Command::QuerySnmp->create();
my $snmp = SDM::Utility::SNMP::DiskUsage->create( loglevel => "DEBUG", hostname => $hostname );

my $table;
my $ref;

#$table = $snmp->acquire_volume_data();
#$ref = $obj->update_volumes( $table, $filername );

$table = $snmp->read_snmp_into_table('gpfsClusterStatusTable');
print Data::Dumper::Dumper $table;
#$ref = $obj->update_gpfs_cluster( $table );
$ref = $obj->update_gpfs_object('GpfsClusterStatus','gpfsClusterName',$table );
print Data::Dumper::Dumper $ref;
exit;

$table = $snmp->read_snmp_into_table('GpfsNodeStatusTable');
$ref = $obj->update_gpfs_node( $table );

$table = $snmp->read_snmp_into_table('gpfsDiskPerfTable');
$ref = $obj->update_gpfs_disk_perf( $table );

$table = $snmp->read_snmp_into_table('gpfsFileSDMPerfTable');
$ref = $obj->update_gpfs_fs_perf( $table );

#print Data::Dumper::Dumper $ref;
UR::Context->commit();

done_testing();
