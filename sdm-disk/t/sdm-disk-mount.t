
use strict;
use warnings;

BEGIN {
    $ENV{SDM_DEPLOYMENT} ||= "testing";
    $ENV{UR_DBI_NO_COMMIT} = 0;
    $ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 0;
};

use SDM;

use Test::More;
use Test::Output;
use Test::Exception;

my $res;
my $params;

# Start with a fresh database
use File::Basename qw/dirname/;
my $top = dirname $FindBin::Bin;
require "$top/t/sdm-lib.pm";
ok( SDM::Test::Lib->testinit == 0, "ok: init db");

# Test insufficient creation params
my @params = ();
ok( ! defined SDM::Disk::Mount->create( @params ), "properly fail to create mount with empty param" );

# Create a filer to operate on
ok( defined SDM::Disk::Filer->create( name => 'filer' ), "properly create filer" );

# A mount is a mapping between an Export and a Volume
# Test creation
@params = ( filername => 'filer', physical_path => '/vol/sata800', mount_path => '/gscmnt/sata800' );
my $volume = SDM::Disk::Volume->create( @params );
ok( defined $volume->id, "properly created new volume");

@params = ();
$res = SDM::Disk::Mount->get( @params );
ok( defined $res->id, "properly got new mount");

@params = ( filername => 'filer', physical_path => '/vol/sata801' );
my $export = SDM::Disk::Export->create( @params );
ok( defined $export->id, "properly made new export");

@params = ( volume_id => $volume->id , export_id => $export->id );
$res = SDM::Disk::Mount->create( @params );
ok( defined $res->id, "properly made new mount");

# Now test 'delete'
foreach $res ( SDM::Disk::Mount->get() ) {
    $res->delete();
    isa_ok( $res, 'UR::DeletedRef' );
}

done_testing();
