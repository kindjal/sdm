
use strict;
use warnings;

BEGIN {
    $ENV{SDM_DEPLOYMENT} ||= "testing";
    $ENV{SDM_LOGLEVEL} ||= "DEBUG";
    $ENV{UR_DBI_NO_COMMIT} = 0;
    $ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 0;
};

use Test::More;
use Test::Output;
use Test::Exception;

use_ok( "SDM" );
use_ok( "SDM::Disk::GpfsFsPerf" );

# Start with a fresh database
use File::Basename qw/dirname/;
my $top = dirname $FindBin::Bin;
require "$top/t/sdm-lib.pm";
ok( SDM::Test::Lib->testinit == 0, "ok: init db");

# Test insufficient creation params
my @params = ();
ok( ! defined SDM::Disk::GpfsFsPerf->create( @params ), "ok: create fails on empty params");

@params = ( gpfsFileSystemPerfName => "/gscmnt/gc2111" );
ok( ! defined SDM::Disk::GpfsFsPerf->create( @params ), "ok: create fails on insufficient params");

@params = (
    gpfsFileSystemPerfName       => "/gscmnt/gc2111",
    gpfsFileSystemBytesReadL     => 1,
    gpfsFileSystemBytesReadH     => 2,
    gpfsFileSystemBytesCacheL    => 3,
    gpfsFileSystemBytesCacheH    => 4,
    gpfsFileSystemBytesWrittenL  => 5,
    gpfsFileSystemBytesWrittenH  => 6,
    gpfsFileSystemReads          => 7,
    gpfsFileSystemCaches         => 8,
    gpfsFileSystemWrites         => 9,
    gpfsFileSystemOpenCalls      => 10,
    gpfsFileSystemCloseCalls     => 11,
    gpfsFileSystemReadCalls      => 12,
    gpfsFileSystemWriteCalls     => 13,
    gpfsFileSystemReaddirCalls   => 14,
    gpfsFileSystemInodesWritten  => 15,
    gpfsFileSystemInodesRead     => 16,
    gpfsFileSystemInodesDeleted  => 17,
    gpfsFileSystemInodesCreated  => 18,
    gpfsFileSystemStatCacheHit   => 19,
    gpfsFileSystemStatCacheMiss  => 20,
);
ok( ! defined SDM::Disk::GpfsFsPerf->create( @params ), "ok: create fails on insufficient params");

ok( SDM::Test::Lib->testdata == 0, "ok: add data to db");

my $ref = SDM::Disk::GpfsFsPerf->create( @params );
ok( defined UR::Context->commit, "ok: commit succeeds" );

foreach my $ref ( SDM::Disk::GpfsFsPerf->get() ) {
    $ref->delete();
    isa_ok( $ref, 'UR::DeletedRef' );
}

done_testing();
