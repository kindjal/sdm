
use strict;
use warnings;

BEGIN {
    $ENV{SDM_DEPLOYMENT} ||= "testing";
    $ENV{UR_DBI_NO_COMMIT} = 0;
    $ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 0;
};

use SDM;

use Test::More;
use Test::Output;
use Test::Exception;

# Start with a fresh database
use File::Basename qw/dirname/;
my $top = dirname $FindBin::Bin;
require "$top/t/sdm-lib.pm";
ok( SDM::Test::Lib->testinit == 0, "ok: init db");

# Test insufficient creation params
my @params = ();
ok( ! defined SDM::Disk::GpfsNode->create( @params ), "ok: commit fails on fk constraint failure");

@params = (
    gpfsNodeName => "linuscs107",
    gpfsNodeDiagnosis => "ok",
    gpfsNodeFailureCount => 1,
    gpfsNodeHealthy => "yes",
    gpfsNodeIP => "1.1.1.1",
    gpfsNodePlatform => "Linux",
    gpfsNodeStatus => "up",
    gpfsNodeThreadWait => "1",
    gpfsNodeVersion => "3.3.0.6"
);
ok( ! defined SDM::Disk::GpfsNode->create( @params ), "ok: commit fails on fk constraint failure");

ok( SDM::Test::Lib->testdata == 0, "ok: init db");

@params = (
    gpfsNodeName => "linuscs103",
    gpfsNodeDiagnosis => "ok",
    gpfsNodeFailureCount => 1,
    gpfsNodeHealthy => "yes",
    gpfsNodeIP => "1.1.1.1",
    gpfsNodePlatform => "Linux",
    gpfsNodeStatus => "up",
    gpfsNodeThreadWait => "1",
    gpfsNodeVersion => "3.3.0.6",
    gpfsNodeFailureCount => 0,
    gpfsNodeHealthy => "yes",
    gpfsNodeType => "manager-quorum",
    gpfsNodeAdmin => "yes",
    gpfsNodePagePoolL => 2147483648,
    gpfsNodePagePoolH => 0,
    gpfsNodePrefetchThreads => 72,
    gpfsNodeMaxMbps => 2480,
    gpfsNodeMaxFilesToCache => 64000,
    gpfsNodeMaxStatCache => 40000,
    gpfsNodeWorker1Threads => 397,
    gpfsNodeDmapiEventTimeout => 4294967295,
    gpfsNodeDmapiMountTimeout => 60,
    gpfsNodeDmapiSessFailureTimeout => 0,
    gpfsNodeNsdServerWaitTimeWindowOnMount => 600,
    gpfsNodeNsdServerWaitTimeForMount => 300,
    gpfsNodeUnmountOnDiskFail => "false",
);

my $ref = SDM::Disk::GpfsNode->create( @params );
lives_ok { UR::Context->commit; } "ok: commit succeeds";

foreach my $ref ( SDM::Disk::GpfsNode->get() ) {
    $ref->delete();
    isa_ok( $ref, 'UR::DeletedRef' );
}
lives_ok { UR::Context->commit; } "ok: commit succeeds";
done_testing()
