
use strict;
use warnings;

use above "System";

use Test::More;
use Test::Output;
use Test::Exception;

BEGIN {
    $ENV{UR_DBI_NO_COMMIT} = 1;
    $ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;
};

my $res;
my $params;

# Start with a fresh database
system('bash ./t/00-disk-prep-test-database.sh');
ok($? >> 8 == 0, "prep test db ok");

# Test insufficient creation params
my @params = ();
ok( ! defined System::Disk::Mount->create( @params ), "properly fail to create mount with empty param" );

# A mount is a mapping between an Export and a Volume

# FIXME below here...
#
# Test creation
@params = ( name => 'nsams2k1' );
$res = System::Disk::Mount->create( @params );
ok( $res->id eq 'nsams2k1', "properly created new mount");
@params = ( name => 'nsams2k1' );
$res = System::Disk::Mount->get( @params );
ok( $res->id eq 'nsams2k1', "properly got new mount");

@params = ( name => 'nsams2k4' );
$res = System::Disk::Mount->create( @params );
ok( $res->id eq 'nsams2k4', "properly created another new mount");

# Test deletion of 1 Mount
@params = ( name => 'nsams2k1' );
$res = System::Disk::Mount->get( @params );
$res->delete();
isa_ok( $res, 'UR::DeletedRef', "properly delete mount" );

# Test update of value
@params = ( name => 'nsams2k4' );
$res = System::Disk::Mount->get( @params );
$res->type("AMS");
ok( $res->type eq "AMS", "Type set to AMS");

# Update created and last modified
$res->created( Date::Format::time2str(q|%Y%m%d%H:%M:%S|, time()) );
$res->last_modified( Date::Format::time2str(q|%Y%m%d%H:%M:%S|, time() - 87000 ) );

# Now test 'delete'
$res = System::Disk::Mount->get();
$res->delete();
isa_ok( $res, 'UR::DeletedRef' );

done_testing();
