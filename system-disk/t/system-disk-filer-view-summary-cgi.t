
use strict;
use warnings;

BEGIN {
    $ENV{SYSTEM_DEPLOYMENT} = "testing";
    $ENV{UR_DBI_NO_COMMIT} = 0;
    $ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 0;
};

use Test::More;
use Test::Output;
use Test::Exception;
use Data::Dumper;

use URI;
use JSON;

use_ok( 'System' );
use_ok( 'System::Disk::Filer::View::Summary::Cgi' );

my $q;
my $o;
my $r;
my $uri;

# Start with a fresh database
use FindBin;
use File::Basename qw/dirname/;
my $top = dirname $FindBin::Bin;
require "$top/t/system-lib.pm";

ok( System::Test::Lib->testinit == 0, "ok: init db");
ok( defined System::Disk::Filer->create( name => 'gpfs' ), "ok: gpfs made" );

$o = System::Disk::Filer::View::Summary::Cgi->create( loglevel => 'DEBUG' );
ok( defined System::Disk::Filer->create( name => 'gpfs2' ), "ok: gpfs2 made" );
ok( defined System::Disk::Group->create( name => 'INFO_APIPE' ), "ok: INFO_APIPE made" );
ok( defined System::Disk::Group->create( name => 'INFO_GENOME_MODEL' ), "ok: INFO_GENOME_MODEL made" );
ok( defined System::Disk::Volume->create( filername => 'gpfs', mount_path => '/gscmnt/sata800', physical_path => '/vol/sata800', disk_group => 'INFO_APIPE', total_kb => 100, used_kb => 2 ), "ok: volume added" );
ok( defined System::Disk::Volume->create( filername => 'gpfs', mount_path => '/gscmnt/sata801', physical_path => '/vol/sata801', disk_group => 'INFO_APIPE', total_kb => 200, used_kb => 4 ), "ok: volume added" );
ok( defined System::Disk::Volume->create( filername => 'gpfs', mount_path => '/gscmnt/sata802', physical_path => '/vol/sata802', disk_group => 'INFO_GENOME_MODEL', total_kb => 30, used_kb => 6 ), "ok: volume added" );
ok( defined System::Disk::Volume->create( filername => 'gpfs', mount_path => '/gscmnt/sata803', physical_path => '/vol/sata803', disk_group => 'INFO_GENOME_MODEL', total_kb => 40, used_kb => 8 ), "ok: volume added" );
UR::Context->commit();

$r = $o->run($q);
my $json = JSON->new();
my $data = $json->decode($r);
my $expected = {
    'total_kb' => '370 (370 KB)',
    'last_modified' => '0000:00:00:00:00:00',
    'used_kb' => '20 (20 KB)',
    'capacity' => '5 %'
};
ok( is_deeply( $data, $expected, "ok: is_deeply" ), "ok: json output");
done_testing();

