
use strict;
use warnings;

BEGIN {
    $ENV{SYSTEM_DEPLOYMENT} = "testing";
    $ENV{UR_DBI_NO_COMMIT} = 0;
    $ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 0;
};

use Test::More;
use Test::Output;
use Test::Exception;
use Data::Dumper;

use URI;
use JSON;

use_ok( 'System' );
use_ok( 'System::Disk::Volume::View::Summary::Cgi' );

my $q;
my $o;
my $r;
my $uri;

# Start with a fresh database
use FindBin;
use File::Basename qw/dirname/;
my $top = dirname $FindBin::Bin;
require "$top/t/system-lib.pm";

ok( System::Test::Lib->testinit == 0, "ok: init db");
ok( defined System::Disk::Filer->create( name => 'gpfs' ), "ok: gpfs made" );

$o = System::Disk::Volume::View::Summary::Cgi->create( loglevel => 'DEBUG' );
ok( defined System::Disk::Filer->create( name => 'gpfs2' ), "ok: gpfs2 made" );
ok( defined System::Disk::Group->create( name => 'INFO_APIPE' ), "ok: INFO_APIPE made" );
ok( defined System::Disk::Group->create( name => 'INFO_GENOME_MODEL' ), "ok: INFO_GENOME_MODEL made" );
ok( defined System::Disk::Volume->create( filername => 'gpfs', mount_path => '/gscmnt/sata800', physical_path => '/vol/sata800', disk_group => 'INFO_APIPE', total_kb => 100, used_kb => 2 ), "ok: volume added" );
ok( defined System::Disk::Volume->create( filername => 'gpfs', mount_path => '/gscmnt/sata801', physical_path => '/vol/sata801', disk_group => 'INFO_APIPE', total_kb => 200, used_kb => 4 ), "ok: volume added" );
ok( defined System::Disk::Volume->create( filername => 'gpfs', mount_path => '/gscmnt/sata802', physical_path => '/vol/sata802', disk_group => 'INFO_GENOME_MODEL', total_kb => 30, used_kb => 6 ), "ok: volume added" );
ok( defined System::Disk::Volume->create( filername => 'gpfs', mount_path => '/gscmnt/sata803', physical_path => '/vol/sata803', disk_group => 'INFO_GENOME_MODEL', total_kb => 40, used_kb => 8 ), "ok: volume added" );
UR::Context->commit();

# Set sSearch for search term
# Set iSortCol_0 = $col_number to sort by
$uri = '/site/system/disk/volume/summary.html.cgi?sEcho=2&iColumns=4&sColumns=&iDisplayStart=0&iDisplayLength=25&sSearch=&bEscapeRegex=true&sSearch_0=&bEscapeRegex_0=true&bSearchable_0=true&sSearch_1=&bEscapeRegex_1=true&bSearchable_1=true&sSearch_2=&bEscapeRegex_2=true&bSearchable_2=true&sSearch_3=&bEscapeRegex_3=true&bSearchable_3=true&iSortingCols=1&iSortCol_0=1&sSortDir_0=asc&bSortable_0=true&bSortable_1=true&bSortable_2=true&bSortable_3=true&rm=table_data HTTP/1.1';

my @r;
$q = URI->new($uri);
my $p = $o->_build_query_param($q);
my $expected = { '-group_by' => [ 'disk_group' ] };
ok( is_deeply( [sort keys %$p], [sort keys %$expected], "ok: is_deeply"), "ok: param hash keys" );
ok( is_deeply( [sort values %$p], [sort values %$expected], "ok: is_deeply"), "ok: param hash values" );

my @set = $o->_build_result_set($q);
ok( $set[0]->disk_group eq 'INFO_APIPE',"ok: grouped by disk group");
ok( $set[1]->disk_group eq 'INFO_GENOME_MODEL',"ok: grouped by disk group");

# Ordering checks
my @order;
$uri = '/site/system/disk/volume/summary.html.cgi?sEcho=2&iColumns=4&sColumns=&iDisplayStart=0&iDisplayLength=25&sSearch=&bEscapeRegex=true&sSearch_0=&bEscapeRegex_0=true&bSearchable_0=true&sSearch_1=&bEscapeRegex_1=true&bSearchable_1=true&sSearch_2=&bEscapeRegex_2=true&bSearchable_2=true&sSearch_3=&bEscapeRegex_3=true&bSearchable_3=true&iSortingCols=1&iSortCol_0=0&sSortDir_0=desc&bSortable_0=true&bSortable_1=true&bSortable_2=true&bSortable_3=true&rm=table_data HTTP/1.1';
$q = URI->new($uri);
@order = $o->_build_order_param($q);
ok( is_deeply( @order, [ 0, 'desc' ], "ok: is_deeply" ), "ok: order by disk_group desc" );

$uri = '/site/system/disk/volume/summary.html.cgi?sEcho=2&iColumns=4&sColumns=&iDisplayStart=0&iDisplayLength=25&sSearch=&bEscapeRegex=true&sSearch_0=&bEscapeRegex_0=true&bSearchable_0=true&sSearch_1=&bEscapeRegex_1=true&bSearchable_1=true&sSearch_2=&bEscapeRegex_2=true&bSearchable_2=true&sSearch_3=&bEscapeRegex_3=true&bSearchable_3=true&iSortingCols=1&iSortCol_0=0&sSortDir_0=asc&bSortable_0=true&bSortable_1=true&bSortable_2=true&bSortable_3=true&rm=table_data HTTP/1.1';
$q = URI->new($uri);
@order = $o->_build_order_param($q);
ok( is_deeply( @order, [ 0, 'asc' ], "ok: is_deeply" ), "ok: order by disk_group asc" );
@r = $o->_build_aadata($q,@set);
ok( $r[0][0] eq 'INFO_APIPE', "ok: order by disk_group asc");

$uri = '/site/system/disk/volume/summary.html.cgi?sEcho=2&iColumns=4&sColumns=&iDisplayStart=0&iDisplayLength=25&sSearch=&bEscapeRegex=true&sSearch_0=&bEscapeRegex_0=true&bSearchable_0=true&sSearch_1=&bEscapeRegex_1=true&bSearchable_1=true&sSearch_2=&bEscapeRegex_2=true&bSearchable_2=true&sSearch_3=&bEscapeRegex_3=true&bSearchable_3=true&iSortingCols=1&iSortCol_0=1&sSortDir_0=asc&bSortable_0=true&bSortable_1=true&bSortable_2=true&bSortable_3=true&rm=table_data HTTP/1.1';
$q = URI->new($uri);
@order = $o->_build_order_param($q);
ok( is_deeply( @order, [ 1, 'asc' ], "ok: is_deeply" ), "ok: order by total_kb asc" );
@r = $o->_build_aadata($q,@set);
ok( is_deeply( $r[0], [ 'INFO_GENOME_MODEL', 70, 14, 20 ], "ok: sort by total_kb asc") );

$uri = '/site/system/disk/volume/summary.html.cgi?sEcho=2&iColumns=4&sColumns=&iDisplayStart=0&iDisplayLength=25&sSearch=&bEscapeRegex=true&sSearch_0=&bEscapeRegex_0=true&bSearchable_0=true&sSearch_1=&bEscapeRegex_1=true&bSearchable_1=true&sSearch_2=&bEscapeRegex_2=true&bSearchable_2=true&sSearch_3=&bEscapeRegex_3=true&bSearchable_3=true&iSortingCols=1&iSortCol_0=0&sSortDir_0=asc&bSortable_0=true&bSortable_1=true&bSortable_2=true&bSortable_3=true&rm=table_data HTTP/1.1';
$q = URI->new($uri);
@order = $o->_build_order_param($q);
ok( is_deeply( @order, [ 0, 'asc' ], "ok: is_deeply" ), "ok: order by total_kb asc" );
@r = $o->_build_aadata($q,@set);
ok( is_deeply( $r[0], [ 'INFO_APIPE', 300, 6, 2 ], "ok: sort by total_kb asc") );

$r = $o->run($q);
my $json = JSON->new();
my $data = $json->decode($r);
$expected = {
          'iTotalRecords' => 2,
          'iTotalDisplayRecords' => 2,
          'aaData' => [
                        [
                          'INFO_APIPE',
                          '300 (300 KB)',
                          '6 (6 KB)',
                          '2 %'
                        ],
                        [
                          'INFO_GENOME_MODEL',
                          '70 (70 KB)',
                          '14 (14 KB)',
                          '20 %'
                        ]
                      ],
          'sEcho' => 2
};
ok( is_deeply( $data, $expected, "ok: is_deeply" ), "ok: json output");
done_testing();

