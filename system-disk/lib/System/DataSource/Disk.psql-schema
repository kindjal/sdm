/* PRAGMA foreign_keys = ON; */
/* create database IF NOT EXISTS system; */
DROP TABLE IF EXISTS DISK_USER;
DROP TABLE IF EXISTS DISK_HOST_ARRAY;
DROP TABLE IF EXISTS DISK_FILER_HOST;
DROP TABLE IF EXISTS DISK_MOUNT;
DROP TABLE IF EXISTS DISK_ARRAY;
DROP TABLE IF EXISTS DISK_HOST;
DROP TABLE IF EXISTS DISK_VOLUME;
DROP TABLE IF EXISTS DISK_EXPORT;
DROP TABLE IF EXISTS DISK_FILER;
DROP TABLE IF EXISTS DISK_GROUP;
CREATE TABLE DISK_USER (
  email         VARCHAR(255) PRIMARY KEY,
  created       DATE,
  last_modified DATE
);
CREATE TABLE DISK_GROUP (
  name          VARCHAR(255) PRIMARY KEY,
  permissions   SMALLINT NOT NULL DEFAULT 0,
  sticky        SMALLINT NOT NULL DEFAULT 0,
  subdirectory  VARCHAR(255) NOT NULL,
  unix_uid      SMALLINT NOT NULL DEFAULT 0,
  unix_gid      SMALLINT NOT NULL DEFAULT 0,
  username      VARCHAR(255),
  created       DATE,
  last_modified DATE
);
CREATE TABLE DISK_FILER (
  name          VARCHAR(255) PRIMARY KEY,
  status        SMALLINT NOT NULL DEFAULT 0,
  filesystem    VARCHAR(255),
  comments      VARCHAR(255),
  created       DATE,
  last_modified DATE
);
CREATE TABLE DISK_EXPORT (
  id            BIGSERIAL PRIMARY KEY,
  filername     VARCHAR(255) NOT NULL CONSTRAINT DISK_EXPORT_FK REFERENCES DISK_FILER(name),
  physical_path VARCHAR(255) NOT NULL,
  created       DATE,
  last_modified DATE,
  CONSTRAINT DISK_EXPORT_UQ UNIQUE (filername,physical_path)
);
CREATE TABLE DISK_VOLUME (
  id            BIGSERIAL PRIMARY KEY,
  mount_path    VARCHAR(255) NOT NULL,
  total_kb      BIGINT DEFAULT 0 NOT NULL,
  used_kb       BIGINT DEFAULT 0 NOT NULL,
  created       DATE,
  last_modified DATE,
  disk_group    VARCHAR(255) CONSTRAINT DISK_VOLUME_FK REFERENCES DISK_GROUP(name)
);
CREATE TABLE DISK_MOUNT (
  export_id     BIGINT,
  volume_id     BIGINT,
  PRIMARY KEY(export_id,volume_id),
  CONSTRAINT DISK_MOUNT_EXPORT_FK FOREIGN KEY(export_id) REFERENCES DISK_EXPORT(id),
  CONSTRAINT DISK_MOUNT_VOLUME_FK FOREIGN KEY(volume_id) REFERENCES DISK_VOLUME(id)
);
CREATE TABLE DISK_HOST (
  hostname      VARCHAR(255) PRIMARY KEY,
  status        SMALLINT NOT NULL DEFAULT 0,
  os            VARCHAR(255),
  location      VARCHAR(255),
  comments      VARCHAR(255),
  created       DATE,
  last_modified DATE
);
CREATE TABLE DISK_FILER_HOST (
  filername     VARCHAR(255),
  hostname      VARCHAR(255),
  PRIMARY KEY(filername,hostname),
  CONSTRAINT DISK_FILER_HOST_FILENAME_FK FOREIGN KEY(filername) REFERENCES DISK_FILER(name),
  CONSTRAINT DISK_FILER_HOST_HOSTNAME_FK FOREIGN KEY(hostname) REFERENCES DISK_HOST(hostname)
);
CREATE TABLE DISK_ARRAY (
  name          VARCHAR(255) PRIMARY KEY,
  model         VARCHAR(255),
  type          VARCHAR(255),
  size          BIGINT DEFAULT 0 NOT NULL,
  created       DATE,
  last_modified DATE,
  hostname      VARCHAR(255) CONSTRAINT DISK_ARRAY_HOST_FK REFERENCES DISK_HOST(hostname)
);
CREATE TABLE DISK_HOST_ARRAY (
  hostname      VARCHAR(255),
  arrayname     VARCHAR(255),
  PRIMARY KEY(hostname,arrayname),
  CONSTRAINT DISK_HOST_ARRAY_HOSTNAME_FK FOREIGN KEY(hostname) REFERENCES DISK_HOST(hostname),
  CONSTRAINT DISK_HOST_ARRAY_ARRAYNME_FK FOREIGN KEY(arrayname) REFERENCES DISK_ARRAY(name)
);
