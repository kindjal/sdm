BEGIN
    EXECUTE IMMEDIATE 'DROP TABLE INFOSYS.DISK_GPFS_DISK_PERF';
    EXCEPTION WHEN OTHERS THEN
        DBMS_OUTPUT.put_line ('DROP TABLE ERROR: ' || DBMS_UTILITY.FORMAT_ERROR_STACK);
    NULL;
END;
/
BEGIN
    EXECUTE IMMEDIATE 'DROP TABLE INFOSYS.DISK_GPFS_FS_PERF';
    EXCEPTION WHEN OTHERS THEN
        DBMS_OUTPUT.put_line ('DROP TABLE ERROR: ' || DBMS_UTILITY.FORMAT_ERROR_STACK);
    NULL;
END;
/
BEGIN
    EXECUTE IMMEDIATE 'DROP TABLE INFOSYS.DISK_GPFS_NODE';
    EXCEPTION WHEN OTHERS THEN
        DBMS_OUTPUT.put_line ('DROP TABLE ERROR: ' || DBMS_UTILITY.FORMAT_ERROR_STACK);
    NULL;
END;
/
BEGIN
    EXECUTE IMMEDIATE 'DROP TABLE INFOSYS.DISK_USER';
    EXCEPTION WHEN OTHERS THEN
        DBMS_OUTPUT.put_line ('DROP TABLE ERROR: ' || DBMS_UTILITY.FORMAT_ERROR_STACK);
    NULL;
END;
/
BEGIN
    EXECUTE IMMEDIATE 'DROP TABLE INFOSYS.DISK_HOST_ARRAY';
    EXCEPTION WHEN OTHERS THEN
        DBMS_OUTPUT.put_line ('DROP TABLE ERROR: ' || DBMS_UTILITY.FORMAT_ERROR_STACK);
    NULL;
END;
/
BEGIN
    EXECUTE IMMEDIATE 'DROP TABLE INFOSYS.DISK_FILER_HOST';
    EXCEPTION WHEN OTHERS THEN
        DBMS_OUTPUT.put_line ('DROP TABLE ERROR: ' || DBMS_UTILITY.FORMAT_ERROR_STACK);
    NULL;
END;
/
BEGIN
    EXECUTE IMMEDIATE 'DROP TABLE INFOSYS.DISK_MOUNT';
    EXCEPTION WHEN OTHERS THEN
        DBMS_OUTPUT.put_line ('DROP TABLE ERROR: ' || DBMS_UTILITY.FORMAT_ERROR_STACK);
    NULL;
END;
/
BEGIN
    EXECUTE IMMEDIATE 'DROP TABLE INFOSYS.DISK_ARRAY';
    EXCEPTION WHEN OTHERS THEN
        DBMS_OUTPUT.put_line ('DROP TABLE ERROR: ' || DBMS_UTILITY.FORMAT_ERROR_STACK);
    NULL;
END;
/
BEGIN
    EXECUTE IMMEDIATE 'DROP TABLE INFOSYS.DISK_HOST';
    EXCEPTION WHEN OTHERS THEN
        DBMS_OUTPUT.put_line ('DROP TABLE ERROR: ' || DBMS_UTILITY.FORMAT_ERROR_STACK);
    NULL;
END;
/
BEGIN
    EXECUTE IMMEDIATE 'DROP TABLE INFOSYS.DISK_VOLUME';
    EXCEPTION WHEN OTHERS THEN
        DBMS_OUTPUT.put_line ('DROP TABLE ERROR: ' || DBMS_UTILITY.FORMAT_ERROR_STACK);
    NULL;
END;
/
BEGIN
    EXECUTE IMMEDIATE 'DROP TABLE INFOSYS.DISK_EXPORT';
    EXCEPTION WHEN OTHERS THEN
        DBMS_OUTPUT.put_line ('DROP TABLE ERROR: ' || DBMS_UTILITY.FORMAT_ERROR_STACK);
    NULL;
END;
/
BEGIN
    EXECUTE IMMEDIATE 'DROP TABLE INFOSYS.DISK_FILER';
    EXCEPTION WHEN OTHERS THEN
        DBMS_OUTPUT.put_line ('DROP TABLE ERROR: ' || DBMS_UTILITY.FORMAT_ERROR_STACK);
    NULL;
END;
/
BEGIN
    EXECUTE IMMEDIATE 'DROP TABLE INFOSYS.DISK_GROUP';
    EXCEPTION WHEN OTHERS THEN
        DBMS_OUTPUT.put_line ('DROP TABLE ERROR: ' || DBMS_UTILITY.FORMAT_ERROR_STACK);
    NULL;
END;
/
BEGIN
    EXECUTE IMMEDIATE 'DROP SEQUENCE INFOSYS.DISK_EXPORT_ID';
    EXCEPTION WHEN OTHERS THEN
        DBMS_OUTPUT.put_line ('DROP TABLE ERROR: ' || DBMS_UTILITY.FORMAT_ERROR_STACK);
    NULL;
END;
/
BEGIN
    EXECUTE IMMEDIATE 'DROP SEQUENCE INFOSYS.DISK_VOLUME_ID';
    EXCEPTION WHEN OTHERS THEN
        DBMS_OUTPUT.put_line ('DROP TABLE ERROR: ' || DBMS_UTILITY.FORMAT_ERROR_STACK);
    NULL;
END;
/
-- Create tables
CREATE TABLE INFOSYS.DISK_USER (
  email         VARCHAR(255) PRIMARY KEY,
  created       DATE,
  last_modified DATE
);
CREATE TABLE INFOSYS.DISK_GROUP (
  name          VARCHAR(255) PRIMARY KEY,
  permissions   NUMBER DEFAULT 0 NOT NULL,
  sticky        NUMBER DEFAULT 0 NOT NULL,
  subdirectory  VARCHAR(255) NOT NULL,
  unix_uid      NUMBER DEFAULT 0 NOT NULL,
  unix_gid      NUMBER DEFAULT 0 NOT NULL,
  username      VARCHAR(255),
  created       DATE,
  last_modified DATE
);
CREATE TABLE INFOSYS.DISK_FILER (
  name          VARCHAR(255) PRIMARY KEY,
  status        NUMBER DEFAULT 0 NOT NULL,
  filesystem    VARCHAR(255),
  comments      VARCHAR(255),
  created       DATE,
  last_modified DATE
);
CREATE TABLE INFOSYS.DISK_EXPORT (
  id            NUMBER PRIMARY KEY,
  filername     VARCHAR(255) NOT NULL CONSTRAINT DISK_EXPORT_FK REFERENCES INFOSYS.DISK_FILER(name),
  physical_path VARCHAR(255) NOT NULL,
  created       DATE,
  last_modified DATE,
  CONSTRAINT DISK_EXPORT_UQ UNIQUE (filername,physical_path)
);
CREATE SEQUENCE INFOSYS.DISK_EXPORT_ID START WITH 1 INCREMENT BY 1;
CREATE OR REPLACE TRIGGER INFOSYS.DISK_EXPORT_ID_TRIGGER
BEFORE INSERT
ON INFOSYS.DISK_EXPORT
FOR EACH ROW
WHEN (new.id IS NULL)
BEGIN
SELECT
    INFOSYS.DISK_EXPORT_ID.nextval
    INTO :new.id
    FROM dual;
END;
/
CREATE TABLE INFOSYS.DISK_VOLUME (
  id            NUMBER PRIMARY KEY,
  mount_path    VARCHAR(255) NOT NULL,
  total_kb      NUMBER DEFAULT 0 NOT NULL,
  used_kb       NUMBER DEFAULT 0 NOT NULL,
  created       DATE,
  last_modified DATE,
  disk_group    VARCHAR(255) CONSTRAINT DISK_VOLUME_FK REFERENCES INFOSYS.DISK_GROUP(name) ON DELETE SET NULL
);
CREATE SEQUENCE INFOSYS.DISK_VOLUME_ID START WITH 1 INCREMENT BY 1;
CREATE OR REPLACE TRIGGER INFOSYS.DISK_VOLUME_ID_TRIGGER
BEFORE INSERT
ON INFOSYS.DISK_VOLUME
FOR EACH ROW
WHEN (new.id IS NULL)
BEGIN
SELECT
    INFOSYS.DISK_VOLUME_ID.nextval
    INTO :new.id
    FROM dual;
END;
/
CREATE TABLE INFOSYS.DISK_MOUNT (
  export_id     NUMBER,
  volume_id     NUMBER,
  PRIMARY KEY(export_id,volume_id),
  CONSTRAINT DISK_MOUNT_EXPORT_FK FOREIGN KEY(export_id) REFERENCES INFOSYS.DISK_EXPORT(id) ON DELETE CASCADE,
  CONSTRAINT DISK_MOUNT_VOLUME_FK FOREIGN KEY(volume_id) REFERENCES INFOSYS.DISK_VOLUME(id) ON DELETE CASCADE
);
CREATE TABLE INFOSYS.DISK_HOST (
  hostname      VARCHAR(255) PRIMARY KEY,
  status        NUMBER DEFAULT 0 NOT NULL,
  os            VARCHAR(255),
  location      VARCHAR(255),
  comments      VARCHAR(255),
  created       DATE,
  last_modified DATE
);
CREATE TABLE INFOSYS.DISK_FILER_HOST (
  filername     VARCHAR(255),
  hostname      VARCHAR(255),
  PRIMARY KEY(filername,hostname),
  CONSTRAINT DISK_FILER_HOST_FILERNAME_FK FOREIGN KEY(filername) REFERENCES INFOSYS.DISK_FILER(name) ON DELETE CASCADE,
  CONSTRAINT DISK_FILER_HOST_HOSTNAME_FK FOREIGN KEY(hostname) REFERENCES INFOSYS.DISK_HOST(hostname) ON DELETE CASCADE
);
CREATE TABLE INFOSYS.DISK_ARRAY (
  name          VARCHAR(255) PRIMARY KEY,
  model         VARCHAR(255),
  type          VARCHAR(255),
  arraysize     NUMBER DEFAULT 0 NOT NULL,
  created       DATE,
  last_modified DATE,
  hostname      VARCHAR(255) CONSTRAINT DISK_ARRAY_HOST_FK REFERENCES INFOSYS.DISK_HOST(hostname) ON DELETE SET NULL
);
CREATE TABLE INFOSYS.DISK_HOST_ARRAY (
  hostname      VARCHAR(255),
  arrayname     VARCHAR(255),
  PRIMARY KEY(hostname,arrayname),
  CONSTRAINT DISK_HOST_ARRAY_HOSTNAME_FK FOREIGN KEY(hostname) REFERENCES INFOSYS.DISK_HOST(hostname) ON DELETE CASCADE,
  CONSTRAINT DISK_HOST_ARRAY_ARRAYNME_FK FOREIGN KEY(arrayname) REFERENCES INFOSYS.DISK_ARRAY(name) ON DELETE CASCADE
);
CREATE TABLE disk_gpfs_disk_perf (
  id                            NUMBER PRIMARY KEY,
  volume_id                     NUMBER NOT NULL,
  gpfsDiskPerfName              VARCHAR(255) DEFAULT '' NOT NULL,
  gpfsDiskPerfFSName            VARCHAR(255) DEFAULT '' NOT NULL,
  gpfsDiskPerfStgPoolName       VARCHAR(255) DEFAULT '' NOT NULL,
  gpfsDiskReadTimeL             NUMBER DEFAULT 0 NOT NULL,
  gpfsDiskReadTimeH             NUMBER DEFAULT 0 NOT NULL,
  gpfsDiskWriteTimeL            NUMBER DEFAULT 0 NOT NULL,
  gpfsDiskWriteTimeH            NUMBER DEFAULT 0 NOT NULL,
  gpfsDiskLongestReadTimeL      NUMBER DEFAULT 0 NOT NULL,
  gpfsDiskLongestReadTimeH      NUMBER DEFAULT 0 NOT NULL,
  gpfsDiskLongestWriteTimeL     NUMBER DEFAULT 0 NOT NULL,
  gpfsDiskLongestWriteTimeH     NUMBER DEFAULT 0 NOT NULL,
  gpfsDiskShortestReadTimeL     NUMBER DEFAULT 0 NOT NULL,
  gpfsDiskShortestReadTimeH     NUMBER DEFAULT 0 NOT NULL,
  gpfsDiskShortestWriteTimeL    NUMBER DEFAULT 0 NOT NULL,
  gpfsDiskShortestWriteTimeH    NUMBER DEFAULT 0 NOT NULL,
  gpfsDiskReadBytesL            NUMBER DEFAULT 0 NOT NULL,
  gpfsDiskReadBytesH            NUMBER DEFAULT 0 NOT NULL,
  gpfsDiskWriteBytesL           NUMBER DEFAULT 0 NOT NULL,
  gpfsDiskWriteBytesH           NUMBER DEFAULT 0 NOT NULL,
  gpfsDiskReadOps               NUMBER DEFAULT 0 NOT NULL,
  gpfsDiskWriteOps              NUMBER DEFAULT 0 NOT NULL,
  created                       DATE,
  last_modified                 DATE,
  CONSTRAINT DISK_GPFS_DISK_PERF_FK FOREIGN KEY(volume_id) REFERENCES INFOSYS.DISK_VOLUME(id)
);
CREATE TABLE disk_gpfs_fs_perf (
  id                            NUMBER PRIMARY KEY,
  volume_id                     NUMBER NOT NULL,
  gpfsFileSystemPerfName        VARCHAR(255) NOT NULL,
  gpfsFileSystemBytesReadL      NUMBER DEFAULT 0 NOT NULL,
  gpfsFileSystemBytesReadH      NUMBER DEFAULT 0 NOT NULL,
  gpfsFileSystemBytesCacheL     NUMBER DEFAULT 0 NOT NULL,
  gpfsFileSystemBytesCacheH     NUMBER DEFAULT 0 NOT NULL,
  gpfsFileSystemBytesWrittenL   NUMBER DEFAULT 0 NOT NULL,
  gpfsFileSystemBytesWrittenH   NUMBER DEFAULT 0 NOT NULL,
  gpfsFileSystemReads           NUMBER DEFAULT 0 NOT NULL,
  gpfsFileSystemCaches          NUMBER DEFAULT 0 NOT NULL,
  gpfsFileSystemWrites          NUMBER DEFAULT 0 NOT NULL,
  gpfsFileSystemOpenCalls       NUMBER DEFAULT 0 NOT NULL,
  gpfsFileSystemCloseCalls      NUMBER DEFAULT 0 NOT NULL,
  gpfsFileSystemReadCalls       NUMBER DEFAULT 0 NOT NULL,
  gpfsFileSystemWriteCalls      NUMBER DEFAULT 0 NOT NULL,
  gpfsFileSystemReaddirCalls    NUMBER DEFAULT 0 NOT NULL,
  gpfsFileSystemInodesWritten   NUMBER DEFAULT 0 NOT NULL,
  gpfsFileSystemInodesRead      NUMBER DEFAULT 0 NOT NULL,
  gpfsFileSystemInodesDeleted   NUMBER DEFAULT 0 NOT NULL,
  gpfsFileSystemInodesCreated   NUMBER DEFAULT 0 NOT NULL,
  gpfsFileSystemStatCacheHit    NUMBER DEFAULT 0 NOT NULL,
  gpfsFileSystemStatCacheMiss   NUMBER DEFAULT 0 NOT NULL,
  created                       DATE,
  last_modified                 DATE,
  CONSTRAINT DISK_GPFS_FS_PERF_FK FOREIGN KEY(volume_id) REFERENCES INFOSYS.DISK_VOLUME(id)
);
