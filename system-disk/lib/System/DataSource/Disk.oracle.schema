BEGIN
    EXECUTE IMMEDIATE 'DROP TABLE infosys.disk_user';
    EXCEPTION WHEN OTHERS THEN
        DBMS_OUTPUT.put_line ('DROP TABLE ERROR: ' || DBMS_UTILITY.FORMAT_ERROR_STACK);
    NULL;
END;
/
BEGIN
    EXECUTE IMMEDIATE 'DROP TABLE infosys.disk_host_array';
    EXCEPTION WHEN OTHERS THEN
        DBMS_OUTPUT.put_line ('DROP TABLE ERROR: ' || DBMS_UTILITY.FORMAT_ERROR_STACK);
    NULL;
END;
/
BEGIN
    EXECUTE IMMEDIATE 'DROP TABLE infosys.disk_filer_host';
    EXCEPTION WHEN OTHERS THEN
        DBMS_OUTPUT.put_line ('DROP TABLE ERROR: ' || DBMS_UTILITY.FORMAT_ERROR_STACK);
    NULL;
END;
/
BEGIN
    EXECUTE IMMEDIATE 'DROP TABLE infosys.disk_mount';
    EXCEPTION WHEN OTHERS THEN
        DBMS_OUTPUT.put_line ('DROP TABLE ERROR: ' || DBMS_UTILITY.FORMAT_ERROR_STACK);
    NULL;
END;
/
BEGIN
    EXECUTE IMMEDIATE 'DROP TABLE infosys.disk_array';
    EXCEPTION WHEN OTHERS THEN
        DBMS_OUTPUT.put_line ('DROP TABLE ERROR: ' || DBMS_UTILITY.FORMAT_ERROR_STACK);
    NULL;
END;
/
BEGIN
    EXECUTE IMMEDIATE 'DROP TABLE infosys.disk_host';
    EXCEPTION WHEN OTHERS THEN
        DBMS_OUTPUT.put_line ('DROP TABLE ERROR: ' || DBMS_UTILITY.FORMAT_ERROR_STACK);
    NULL;
END;
/
BEGIN
    EXECUTE IMMEDIATE 'DROP TABLE infosys.disk_volume';
    EXCEPTION WHEN OTHERS THEN
        DBMS_OUTPUT.put_line ('DROP TABLE ERROR: ' || DBMS_UTILITY.FORMAT_ERROR_STACK);
    NULL;
END;
/
BEGIN
    EXECUTE IMMEDIATE 'DROP TABLE infosys.disk_export';
    EXCEPTION WHEN OTHERS THEN
        DBMS_OUTPUT.put_line ('DROP TABLE ERROR: ' || DBMS_UTILITY.FORMAT_ERROR_STACK);
    NULL;
END;
/
BEGIN
    EXECUTE IMMEDIATE 'DROP TABLE infosys.disk_filer';
    EXCEPTION WHEN OTHERS THEN
        DBMS_OUTPUT.put_line ('DROP TABLE ERROR: ' || DBMS_UTILITY.FORMAT_ERROR_STACK);
    NULL;
END;
/
BEGIN
    EXECUTE IMMEDIATE 'DROP TABLE infosys.disk_group';
    EXCEPTION WHEN OTHERS THEN
        DBMS_OUTPUT.put_line ('DROP TABLE ERROR: ' || DBMS_UTILITY.FORMAT_ERROR_STACK);
    NULL;
END;
/
BEGIN
    EXECUTE IMMEDIATE 'DROP SEQUENCE infosys.disk_export_id';
    EXCEPTION WHEN OTHERS THEN
        DBMS_OUTPUT.put_line ('DROP TABLE ERROR: ' || DBMS_UTILITY.FORMAT_ERROR_STACK);
    NULL;
END;
/
BEGIN
    EXECUTE IMMEDIATE 'DROP SEQUENCE infosys.disk_volume_id';
    EXCEPTION WHEN OTHERS THEN
        DBMS_OUTPUT.put_line ('DROP TABLE ERROR: ' || DBMS_UTILITY.FORMAT_ERROR_STACK);
    NULL;
END;
/
-- Create tables
CREATE TABLE infosys.disk_user (
  email         VARCHAR(255) PRIMARY KEY,
  created       DATE,
  last_modified DATE
);
CREATE TABLE infosys.disk_group (
  name          VARCHAR(255) PRIMARY KEY,
  permissions   NUMBER DEFAULT 0 NOT NULL,
  sticky        NUMBER DEFAULT 0 NOT NULL,
  subdirectory  VARCHAR(255) NOT NULL,
  unix_uid      NUMBER DEFAULT 0 NOT NULL,
  unix_gid      NUMBER DEFAULT 0 NOT NULL,
  username      VARCHAR(255),
  created       DATE,
  last_modified DATE
);
CREATE TABLE infosys.disk_filer (
  name          VARCHAR(255) PRIMARY KEY,
  status        NUMBER DEFAULT 0 NOT NULL,
  filesystem    VARCHAR(255),
  comments      VARCHAR(255),
  created       DATE,
  last_modified DATE
);
CREATE TABLE infosys.disk_export (
  id            NUMBER PRIMARY KEY,
  filername     VARCHAR(255) NOT NULL CONSTRAINT disk_export_fk REFERENCES infosys.disk_filer(name),
  physical_path VARCHAR(255) NOT NULL,
  created       DATE,
  last_modified DATE,
  CONSTRAINT disk_export_uq UNIQUE (filername,physical_path)
);
CREATE SEQUENCE infosys.disk_export_id START WITH 1 INCREMENT BY 1;
CREATE OR REPLACE TRIGGER infosys.disk_export_id_trigger
BEFORE INSERT
ON infosys.disk_export
FOR EACH ROW
WHEN (new.id IS NULL)
BEGIN
SELECT
    infosys.disk_export_id.nextval
    INTO :new.id
    FROM dual;
END;
/
CREATE TABLE infosys.disk_volume (
  id            NUMBER PRIMARY KEY,
  mount_path    VARCHAR(255) NOT NULL,
  total_kb      NUMBER DEFAULT 0 NOT NULL,
  used_kb       NUMBER DEFAULT 0 NOT NULL,
  created       DATE,
  last_modified DATE,
  disk_group    VARCHAR(255) CONSTRAINT disk_volume_fk REFERENCES infosys.disk_group(name)
);
CREATE SEQUENCE infosys.disk_volume_id START WITH 1 INCREMENT BY 1;
CREATE OR REPLACE TRIGGER infosys.disk_volume_id_trigger
BEFORE INSERT
ON infosys.disk_volume
FOR EACH ROW
WHEN (new.id IS NULL)
BEGIN
SELECT
    infosys.disk_volume_id.nextval
    INTO :new.id
    FROM dual;
END;
/
CREATE TABLE infosys.disk_mount (
  export_id     NUMBER,
  volume_id     NUMBER,
  PRIMARY KEY(export_id,volume_id),
  CONSTRAINT disk_mount_export_fk FOREIGN KEY(export_id) REFERENCES infosys.disk_export(id),
  CONSTRAINT disk_mount_volume_fk FOREIGN KEY(volume_id) REFERENCES infosys.disk_volume(id)
);
CREATE TABLE infosys.disk_host (
  hostname      VARCHAR(255) PRIMARY KEY,
  status        NUMBER DEFAULT 0 NOT NULL,
  os            VARCHAR(255),
  location      VARCHAR(255),
  comments      VARCHAR(255),
  created       DATE,
  last_modified DATE
);
CREATE TABLE infosys.disk_filer_host (
  filername     VARCHAR(255),
  hostname      VARCHAR(255),
  PRIMARY KEY(filername,hostname),
  CONSTRAINT disk_filer_host_filename_fk FOREIGN KEY(filername) REFERENCES infosys.disk_filer(name),
  CONSTRAINT disk_filer_host_hostname_fk FOREIGN KEY(hostname) REFERENCES infosys.disk_host(hostname)
);
CREATE TABLE infosys.disk_array (
  name          VARCHAR(255) PRIMARY KEY,
  model         VARCHAR(255),
  type          VARCHAR(255),
  arraysize     NUMBER DEFAULT 0 NOT NULL,
  created       DATE,
  last_modified DATE,
  hostname      VARCHAR(255) CONSTRAINT disk_array_host_fk REFERENCES infosys.disk_host(hostname)
);
CREATE TABLE infosys.disk_host_array (
  hostname      VARCHAR(255),
  arrayname     VARCHAR(255),
  PRIMARY KEY(hostname,arrayname),
  CONSTRAINT disk_host_array_hostname_fk FOREIGN KEY(hostname) REFERENCES infosys.disk_host(hostname),
  CONSTRAINT disk_host_array_arraynme_fk FOREIGN KEY(arrayname) REFERENCES infosys.disk_array(name)
);
